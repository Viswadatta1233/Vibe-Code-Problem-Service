name: Problem Service CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_IMAGE: problem-service
  DOCKER_TAG: ${{ github.sha }}

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Output image info
      run: |
        echo "Image built and pushed successfully!"
        echo "Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"
        
  deploy:
    name: Deploy to EC2
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Pull latest image
      run: |
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
        
    - name: Stop and remove old container
      run: |
        docker stop problem-service || true
        docker rm problem-service || true
        
    - name: Start new container
      run: |
        docker run -d \
          --name problem-service \
          --restart unless-stopped \
          --env-file /var/www/problem-service/.env \
          -p 3000:3000 \
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
        
    - name: Check container status
      run: |
        echo "Container status:"
        docker ps -a
        echo "Container logs:"
        docker logs problem-service
        
    - name: Wait for container to be ready
      run: |
        echo "Waiting for container to start..."
        sleep 15
        
    - name: Health check
      run: |
        echo "Performing health check..."
        for i in {1..30}; do
          if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "Health check passed!"
            exit 0
          fi
          echo "Attempt $i: Health check failed, retrying in 2 seconds..."
          sleep 2
        done
        echo "Health check failed after 30 attempts"
        exit 1
        
    - name: Clean up old images
      run: |
        echo "Cleaning up old Docker images..."
        docker image prune -f
        docker system prune -f 